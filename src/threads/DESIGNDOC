			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Benjamin Lipp Bdlipp@buffalo.edu
Brian Karshick <briankar@buffalo.edu>
Cory Beightol <cb56@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* List of all threads sorted by their priority. */
static struct list all_list_ordered;

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    struct list_elem allelemord;        /* Ordered threads list element. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    struct list waiters;
    struct list_elem waiters_elem;
#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* timer_sleep implementation */
    struct semaphore wakesema;
    long long waketime;

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Chane the timer_sleep from busy waiting to sleeping the thread by putting it into some type of queue, which is orginized by priorty.
void
timer_sleep (int64_t ticks)
{
  if (ticks <= 0)
    return;

  struct thread *cur = thread_current ();
  cur->waketime = timer_ticks () + ticks;

  ASSERT (intr_get_level () == INTR_ON);

  sema_down(&cur->wakesema);
}


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We orginize the thread list by shortest job first. and have timer_sleep() sleep a thread for a certian ammount of ticks.
This will let the timer_interrupt handeler only have to do little work checking how many ticks are left.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Timer sleep needs to have a critical section so that if timer_sleep() is called on a thread, it wont accept another thread
until the current one is sleeping


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

we would have to temp turn off interupts during timer_sleep(). from the assignment:

	In the Pintos projects, the only class of problem best solved by disabling interrupts is coordinating data shared
	between a kernel thread and an interrupt handler. Because interrupt handlers can't sleep, they can't acquire locks.
	This means that data shared between kernel threads and an interrupt handler must be protected within a kernel thread
	by turning off interrupts

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This way was the most intuitive; changing thread sleep to have each thread yeild for a certian ammount of time, then waking that thread up, getting rid of busy waiting.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    struct list_elem allelemord;        /* Ordered threads list element. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    struct list waiters;
    struct list_elem waiters_elem;
#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* timer_sleep implementation */
    struct semaphore wakesema;
    long long waketime;

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We use a priority queue that saves the the threads priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When a low priority thread, t1, requires a high priority thread, t2, t1 temporarily gets t2's priority to ensure there are no deadlocks

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

the lower priority thread gets preempted in favor of the higher one

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Disable interupts until the priority is changed


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

the challenging part was dealing with priority donation, we decided on each thread having a list of other threads that are waiting for that thread to finish.
All of the threads in the waiters list have their priority changed up. We also orginized the ready list by priorty and sort it any time priorty is changed.


			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0  63  61  59     A
 4      4   0   0  62  61  59     A
 8      8   0   0  61  61  59     A
12     12   0   0  60  61  59     B
16     12   4   0  60  60  59     A
20     16   4   0  59  60  59     B
24     16   8   0  59  59  59     A
28     20   8   0  58  59  59     B
32     20  12   0  58  58  59     C
36     20  12   4  58  58  58     A

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

It was unclear whether to calculate recent_cpu using load average.
The final result does not take it into account because load_avg is
only computed once per second, whereas 36 timer ticks is only 0.36
seconds and presumably recent_cpu would not have been updated with
a load_avg value during the "simulation" above. This should
approximately resemble the behavior of the 4.4BSD scheduling algorithm.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

Adding computation-heavy code inside the interrupt context can have
the result of stealing CPU time from other threads. This can affect
scheduling decisions and potentially cause threads to be given less
time to execute before a thread switch.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
