		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Benjamin Lipp <bdlipp@buffalo.edu>
Brian Karshick <briankar@buffalo.edu>
Cory Beightol <cb56@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
A argument stack needs to be set up on boot of pintos. One that uses memcpy(). 
The program name is always in thread->name so we can always access it. 
Avoiding overflowing the stack has to do with the esp pointer and checking if it is valid. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
In strtok_r() the save_pointer is provided by the caller 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1 shortening time inside the kernel
2 checking if the arguments are valid before passing it to the kernel to avoid kernel fail. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique within the entire OS. We keep track of open files in the kernel.
Each file has only one file descriptor to prevent ambiguity.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We read and write files using a buffer. When we read a file, we use a lock
so that the filesystem is not accessed or used by another process. Then, we use
file_read to actually read the file. For writing, we also use a lock, and then use
file_write to write/print out what's in the file. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

So, the best case scenario is the full page is copied into contiguous memory space.
Then we could use a pointer that points to the head of the page and would only have to
call pagedir_get_page() once. Worst case scenario is the page gets split up and stored into
4096 slots of memory, which would require 4096 calls.

For 2 bytes it's the same idea: 1 in the best case and 2 in the worst case. In general you can use
defragmentation to minimize the possible number of inspections. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

A synchronization variable will be used in the "exec" call that waits
for the executable load function to return before allowing exec to
return. Perhaps setting the value of a struct variable on the calling
thread will be required to pass the data inter-thread as required.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

a. P must wait on a synchronization variable that C holds before 
   wait(C) can return.
b. In this case P will acquire the aforementioned synchronization
   variable immediately, so no blocking will occur.
c. Processes, when exiting, should free child resources, then
   free the resources they hold themselves.
d. C will be forced to terminate and release its resources, because
   processes cannot exist without a parent (except the root process).
e. Nothing special to consider here.
f. Perhaps if a process crashes, there will be issues freeing the
   resources it held. We will be on the lookout for these, fixing
   them as the project progresses.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
