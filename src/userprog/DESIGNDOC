		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Benjamin Lipp <bdlipp@buffalo.edu>
Brian Karshick <briankar@buffalo.edu>
Cory Beightol <cb56@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
A argument stack needs to be set up on boot of pintos. One that uses memcpy(). 
The program name is always in thread->name so we can always access it. 
Avoiding overflowing the stack has to do with the esp pointer and checking if it is valid. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
In strtok_r() the save_pointer is provided by the caller 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1 shortening time inside the kernel
2 checking if the arguments are valid before passing it to the kernel to avoid kernel fail. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

We store file descriptors in an array, beginning with index 2 (since fds of 0 and 1 would be invalid). So, every time we add an fd to this
array, its fd is simply the index it is stored in.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

For reading, we use a helper function called VERIFY(defined in syscall.c) to make sure the buffer is not empty. If it is, VERIFY exits with status -1.
Otherwise, if VERIFY doesn not exit, we get an fd from the buffer. Then, we wait to acquire a filesystems lock, to make sure that the file
we're reading is not manipulated by other processes while we are reading it. Then, we use get_pf(fd) to go from fd, which is an int, to a pointer
which points to the corresponding file we are about to read. Again, we make sure this file is valid, and use the function file_read from file.c
to actually read the file. We store its return value in count. Then we release the lock, because we're done reading. Finally, we return count,
which tells us how many bytes of the file were read.

For writing, the process is very similar. We use the same lock that we use for read. The only real difference is obviously that we use 
file_write from file.c instead of file_read, but the overall process is basically the same. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

So, the best case scenario is the full page is copied into contiguous memory space.
Then we could use a pointer that points to the head of the page and would only have to
call pagedir_get_page() once. Worst case scenario is the page gets split up and stored into
4096 slots of memory, which would require 4096 calls.

For 2 bytes it's the same idea: 1 in the best case and 2 in the worst case. In general you can use
defragmentation to minimize the possible number of inspections. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

First of all, we use helper functions called VERIFY and VERIFY_VALUE to handle exceptions. We wrote these functions towards the stop of 
syscall.c. This makes our code clean and ensures that we're doing minimal error handling in the actual syscalls themselves. For example, in
our read and write syscalls, the first thing we do is verify the buffer. This is one line of code, so it does not obscure the primary
function of our read/write syscalls. Also, if VERIFY fails in either of these functions we exit with code -1 immediately -- that is what
VERIFY does. That way, we exit with an error code before we acquire a lock, so that our critical resource allocation does not get messed up.
The only other potential error in read/write is if the pf we get from get_pf(fd) is invalid. If it is, we simply change the count we return,
and then release the lock, just as we would if the pf were valid. The only thing that changes is the value of count, but we release the lock
to avoid blocking a critical resource/starvation, etc. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

A synchronization variable will be used in the "exec" call that waits
for the executable load function to return before allowing exec to
return. Perhaps setting the value of a struct variable on the calling
thread will be required to pass the data inter-thread as required.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

a. P must wait on a synchronization variable that C holds before 
   wait(C) can return.
b. In this case P will acquire the aforementioned synchronization
   variable immediately, so no blocking will occur.
c. Processes, when exiting, should free child resources, then
   free the resources they hold themselves.
d. C will be forced to terminate and release its resources, because
   processes cannot exist without a parent (except the root process).
e. Nothing special to consider here.
f. Perhaps if a process crashes, there will be issues freeing the
   resources it held. We will be on the lookout for these, fixing
   them as the project progresses.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
